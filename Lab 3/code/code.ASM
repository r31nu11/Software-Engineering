    org 100h ; начало программы
    jmp start
    str db 80 dup(?) ; буфер для строки
    len db 0 ; длина строки
    msg db 'Введите строку: $' ; сообщение для пользователя

    start:
    mov ax, cs ; загрузить адрес сегмента кода в ax
    mov ds, ax ; переместить адрес сегмента кода в ds
    mov es, ax ; переместить адрес сегмента кода в es

    mov ah, 9 ; функция DOS для вывода строки на экран
    mov dx, msg ; адрес сообщения в dx
    int 21h ; вызвать DOS

    mov ah, 0Ah ; функция DOS для чтения строки с клавиатуры
    mov dx, str ; адрес буфера для строки в dx
    int 21h ; вызвать DOS

    mov al, len ; загрузить длину строки в al
    cbw ; расширить al до ax
    mov cx, ax ; переместить длину строки в cx
    jcxz end ; если cx равен нулю, то перейти к концу программы

    mov si, str + 2 ; загрузить адрес начала строки в si
    cld ; установить направление сканирования вперед

    loop:
    lodsb ; загрузить символ из si в al и увеличить si на 1
    cmp al, 'a' ; сравнить al с 'a'
    jb next ; если al меньше 'a', то перейти к следующему символу
    cmp al, 'z' ; сравнить al с 'z'
    ja next ; если al больше 'z', то перейти к следующему символу
    sub al, 32 ; вычесть 32 из al (перевести символ из нижнего регистра в верхний)
    stosb ; сохранить символ из al в es:di и увеличить di на 1
    jmp next ; перейти к следующему символу

    next:
    cmp al, 'A' ; сравнить al с 'A'
    jb skip ; если al меньше 'A', то перейти к пропуску изменения регистра
    cmp al, 'Z' ; сравнить al с 'Z'
    ja skip ; если al больше 'Z', то перейти к пропуску изменения регистра
    add al, 32 ; прибавить 32 к al (перевести символ из верхнего регистра в нижний)
    stosb ; сохранить символ из al в es:di и увеличить di на 1

    skip:
    loop loop ; повторять цикл пока cx не равен нулю

    end:
    mov ah, 9 ; функция DOS для вывода строки на экран
    mov dx, str + 2; адрес измененной строки в dx
    int 21h ; вызвать DOS

    mov ah, 4Ch ; функция DOS для завершения программы
    int 21h ; вызвать DOS

