; Формат COM
org 100h ; Адрес начала кода

; Сегмент данных
input db 100 dup(0) ; Буфер для ввода строки
len db 0 ; Длина вводимой строки
prompt db "Введите строку: ", "$" ; Поясняющий текст
result db "Результат: ", "$" ; Текст перед выводом результата

; Сегмент кода

  mov ah, 09h ; Функция DOS для вывода строки
  mov dx, prompt ; Адрес поясняющего текста в dx
  int 21h ; Вызвать DOS

  mov ah, 0Ah ; Функция DOS для ввода строки
  mov dx, input ; Адрес буфера для ввода строки в dx
  int 21h ; Вызвать DOS

  mov al, input[1] ; AL = количество символов в буфере
  mov len, al ; Сохранить длину в переменной len

  call transform ; Преобразовать строку в соответствии с вариантом

  mov ah, 09h ; Функция DOS для вывода строки
  mov dx, result ; Адрес текста перед результатом в dx
  int 21h ; Вызвать DOS

  mov ah, 09h ; Функция DOS для вывода строки
  mov dx, input + 2 ; Адрес преобразованной строки в dx
  int 21h ; Вызвать DOS

  mov ah, 00h ; Функция BIOS для чтения символа с клавиатуры
  int 16h ; Вызвать BIOS

  mov ah, 4Ch ; Функция DOS для завершения программы
  int 21h ; Вызвать DOS

; Процедура для преобразования строки по варианту S3 <-> S9, S2 <- S4 - (S5 - S6)
transform:
 push bx ; Сохранить значение bx на стеке

  ; Поменять местами S3 и S9 (обращение к памяти по базе и смещению)
  mov bx, input + 2 ; BX = адрес начала строки
  xchg [bx + 2], [bx + 8] ; Поменять местами байты по адресам [BX + 2] и [BX + 8]

  ; В S2 записать значение S4 - (S5 - S6) (обращение к памяти по индексу и смещению)
  mov bx, input + 2 ; BX = адрес начала строки
  mov al, [bx + si] ; AL = S4 (SI = индекс i-го символа)
  sub al, [bx + si + 1] ; AL = AL - S5 (SI + 1 = индекс (i+1)-го символа)
  add al, [bx + si + 2] ; AL = AL + S6 (SI + 2 = индекс (i+2)-го символа)
  mov [bx + si - 2], al ; S2 = AL (SI - 2 = индекс (i-2)-го символа)

  pop bx ; Восстановить значение bx из стека
ret