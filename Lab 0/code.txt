; Сегмент данных
format PE GUI 4.0 ; Формат исполняемого файла
entry start ; Точка входа в программу

section '.data' data readable writeable ; Секция данных

  input db 100 dup(0) ; Буфер для ввода строки
  len db 0 ; Длина вводимой строки
  prompt db "Введите строку: ",0 ; Поясняющий текст
  result db "Результат: ",0 ; Текст перед выводом результата

section '.code' code readable executable ; Секция кода

  start: ; Точка входа в программу

    mov eax, 4 ; Номер системного вызова write
    mov ebx, 1 ; Дескриптор стандартного вывода
    mov ecx, prompt ; Адрес поясняющего текста
    mov edx, sizeof.prompt ; Длина поясняющего текста
    int 80h ; Вызвать ядро Linux

    mov eax, 3 ; Номер системного вызова read
    mov ebx, 0 ; Дескриптор стандартного ввода
    mov ecx, input ; Адрес буфера для ввода строки
    mov edx, sizeof.input ; Размер буфера для ввода строки
    int 80h ; Вызвать ядро Linux

    mov al, input[1] ; AL = количество символов в буфере
    mov len, al ; Сохранить длину в переменной len

    call transform ; Преобразовать строку в соответствии с вариантом

    mov eax, 4 ; Номер системного вызова write
    mov ebx, 1 ; Дескриптор стандартного вывода
    mov ecx, result ; Адрес текста перед результатом
    mov edx, sizeof.result ; Длина текста перед результатом
    int 80h ; Вызвать ядро Linux

    mov eax, 4 ; Номер системного вызова write
    mov ebx, 1 ; Дескриптор стандартного вывода
    mov ecx, input + 2 ; Адрес преобразованной строки
    mov edx, [len] ; Длина преобразованной строки
    int 80h ; Вызвать ядро Linux

    mov eax, 1 ; Номер системного вызова exit
    mov ebx, 0 ; Код завершения процесса
    int 80h ; Вызвать ядро Linux

; Процедура для преобразования строки по варианту S3 <-> S9, S2 <- S4 - (S5 - S6)
transform:
  push ebx ; Сохранить значение ebx на стеке

  ; Поменять местами S3 и S9 (обращение к памяти по базе и смещению)
  mov ebx, input + 2 ; EBX = адрес начала строки
  xchg [ebx + 2], [ebx + 8] ; Поменять местами байты по адресам [EBX + 2] и [EBX + 8]

  ; В S2 записать значение S4 - (S5 - S6) (обращение к памяти по индексу и смещению)
  mov ebx, input + 2 ; EBX = адрес начала строки
  mov al, [ebx + esi] ; AL = S4 (ESI = индекс i-го символа)
  sub al, [ebx + esi + 1] ; AL = AL - S5 (ESI + 1 = индекс (i+1)-го символа)
  add al, [ebx + esi + 2] ; AL = AL + S6 (ESI + 2 = индекс (i+2)-го символа)
  mov [ebx + esi - 2], al ; S2 = AL (ESI - 2 = индекс (i-2)-го символа)

 pop ebx ; Восстановить значение ebx из стека
ret